{"version":3,"sources":["node_modules/regenerator-runtime/runtime.js","node_modules/idb/build/esm/wrap-idb-value.js","node_modules/idb/build/esm/index.js","src/instance.ts","schema/index.js","src/constants/db.ts","src/db.ts"],"names":["instanceOfAny","object","constructors","some","c","idbProxyableTypes","cursorAdvanceMethods","getIdbProxyableTypes","IDBDatabase","IDBObjectStore","IDBIndex","IDBCursor","IDBTransaction","getCursorAdvanceMethods","prototype","advance","continue","continuePrimaryKey","cursorRequestMap","WeakMap","transactionDoneMap","transactionStoreNamesMap","transformCache","reverseTransformCache","promisifyRequest","request","promise","Promise","resolve","reject","unlisten","removeEventListener","success","error","wrap","result","addEventListener","then","value","set","catch","cacheDonePromiseForTransaction","tx","has","done","complete","DOMException","idbProxyTraps","get","target","prop","receiver","objectStoreNames","undefined","objectStore","replaceTraps","callback","wrapFunction","func","transaction","storeNames","args","call","unwrap","sort","includes","apply","transformCachableValue","Proxy","IDBRequest","newValue","openDB","name","version","blocked","upgrade","blocking","terminated","indexedDB","open","openPromise","event","oldVersion","newVersion","db","deleteDB","deleteDatabase","readMethods","writeMethods","cachedMethods","Map","getMethod","targetFuncName","replace","useIndex","isWrite","method","storeName","store","index","shift","returnVal","oldTraps","schema","autoIncrement","keyPath","data","foo"],"mappings":"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":"db.cc130e9d.js","sourceRoot":"..","sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","const instanceOfAny = (object, constructors) => constructors.some(c => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst cursorRequestMap = new WeakMap();\nconst transactionDoneMap = new WeakMap();\nconst transactionStoreNamesMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    promise\n        .then(value => {\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) {\n            cursorRequestMap.set(value, request);\n        }\n        // Catching to avoid \"Uncaught Promise exceptions\"\n    })\n        .catch(() => { });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === 'objectStoreNames') {\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\n            }\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction &&\n        !('objectStoreNames' in IDBTransaction.prototype)) {\n        return function (storeNames, ...args) {\n            const tx = func.call(unwrap(this), storeNames, ...args);\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n            return wrap(tx);\n        };\n    }\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(cursorRequestMap.get(this));\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\nexport { reverseTransformCache as a, instanceOfAny as i, replaceTraps as r, unwrap as u, wrap as w };\n","import { w as wrap, r as replaceTraps } from './wrap-idb-value.js';\nexport { u as unwrap, w as wrap } from './wrap-idb-value.js';\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', event => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction));\n        });\n    }\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    if (terminated)\n        request.addEventListener('close', () => terminated());\n    if (blocking) {\n        openPromise\n            .then(db => db.addEventListener('versionchange', blocking))\n            .catch(() => { });\n    }\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        const returnVal = target[targetFuncName](...args);\n        if (isWrite)\n            await tx.done;\n        return returnVal;\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps(oldTraps => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nexport { deleteDB, openDB };\n","import { IDBPDatabase } from 'idb';\n\nlet instance: IDBPDatabase;\n\n/**\n * Sets the database instance\n *\n * @param {IDBPDatabase} db\n * @returns {void}\n */\nexport function setDBInstance(db: IDBPDatabase): void {\n  instance = db;\n}\n\n/**\n * Returns the database instance\n *\n * @returns {IDBPDatabase}\n */\nexport function getDBInstance(): IDBPDatabase {\n  return instance;\n}\n","export const schema = [\n  {\n    storeName: 'store1',\n    autoIncrement: 'true',\n    keyPath: 'id',\n    data: [\n      {\n        foo: 'bar',\n      },\n    ],\n  },\n];\n","export const WRITE_ACCESS = 'readwrite';\nexport const DB_NAME = 'sw-server';\nexport const VERSION = 1;\n","import 'regenerator-runtime/runtime';\nimport {\n  openDB,\n  deleteDB,\n  IDBPDatabase,\n  IDBPObjectStore,\n  IDBPTransaction,\n} from 'idb';\n\nimport { getDBInstance, setDBInstance } from './instance';\nimport { schema } from '../schema';\nimport { Store } from './interfaces';\nimport { WRITE_ACCESS, DB_NAME, VERSION } from './constants/db';\n\n/**\n * Create a new IndexedDB store\n *\n * @param {IDBPDatabase} db\n * @param {Store} store\n * @returns {Promise<void>}\n */\nexport async function createStore(\n  db: IDBPDatabase,\n  store: Store,\n): Promise<void> {\n  const { storeName, keyPath, autoIncrement } = store;\n\n  if (!db.objectStoreNames.contains(storeName)) {\n    db.createObjectStore(storeName, { keyPath, autoIncrement });\n  }\n}\n\n/**\n * Prepare an IndexedDB transaction\n *\n * @param {string} storeName\n * @returns {Promise<IDBPTransaction>}\n */\nexport async function setupTransaction(\n  storeName: string,\n): Promise<IDBPTransaction<unknown, [string]>> {\n  return getDBInstance().transaction(storeName, WRITE_ACCESS);\n}\n\n/**\n * Return an IndexedDB store by name\n *\n * @param {string} storeName\n * @param {IDBPTransaction} tx\n * @returns {Promsie<IDBPObjectStore>}\n */\nexport async function getObjectStore(\n  storeName: string,\n  tx: IDBPTransaction<unknown, [string]>,\n): Promise<IDBPObjectStore> {\n  return tx.objectStore(storeName);\n}\n\n/**\n * Find a value in a store by id\n *\n * @param {string} storeName\n * @param {string} id\n * @returns {Promise<unknown>}\n */\nexport async function find(storeName: string, id: string): Promise<unknown> {\n  return await getDBInstance().get(storeName, parseInt(id));\n}\n\n/**\n * Add a new value to a store\n *\n * @param {string} storeName\n * @param {object} data\n * @returns {Promise<void>}\n */\nexport async function add(storeName: string, data: object): Promise<void> {\n  const tx = await setupTransaction(storeName);\n  const store: IDBPObjectStore = await getObjectStore(storeName, tx);\n  await store.put(data);\n  await tx.done;\n}\n\n/**\n * Remove a value from a store by id\n *\n * @param {string} storeName\n * @param {number} id\n * @returns {Promise<void>}\n */\nexport async function remove(\n  storeName: string,\n  id: string | number,\n): Promise<void> {\n  const tx = await setupTransaction(storeName);\n  const store: IDBPObjectStore = await getObjectStore(storeName, tx);\n  await store.delete(id);\n  await tx.done;\n}\n\n/**\n * Open IndexedDB and seed with schema data\n *\n * @returns {Promise<void>}\n */\nexport async function seed(): Promise<void> {\n  if (!schema) {\n    throw new Error('Schema must be provided to initialize database!');\n  }\n\n  const db = await openDB(DB_NAME, VERSION, {\n    upgrade(db) {\n      (schema as any).forEach(\n        async (store: Store) => await createStore(db, store),\n      );\n    },\n  });\n\n  setDBInstance(db);\n\n  (schema as any).forEach(({ storeName = '', data = [] }: Partial<Store>) =>\n    data.forEach(async (item: object) => await add(storeName, item)),\n  );\n}\n\n/**\n * Remove the IndexedDB\n *\n * @returns {Promise<void>}\n */\nexport async function removeDB(): Promise<void> {\n  await deleteDB(DB_NAME);\n}\n"]}